%% This code plotting the Hysteresis Loop
%put this script in the same direcory of the data.

%% clear workspace
clc
close all

%% import data of measurements

%% iterate over all the files, and import B,H that measured. add them to struct
materials(1)=getMaterials(3);
materials(2)=getMaterials(4);
printGraph(materials);

%% print graphs
function printGraph(materials)
    for m=1:2
        figure(m);
        set(gca,'fontsize',12);
        hold on;
        title("Material "+materials(m).material, 'interpreter','latex');
        xlabel("$ \left[V\right] \propto H $", 'interpreter','latex');
        ylabel("$ \left[V\right] \propto B $", 'interpreter','latex');
        clear p;
        for k=length(materials(m).data):-1:1
            p(k) = plot(materials(m).data(k).ch1,materials(m).data(k).ch2,'markersize',12);
        end
        p2 = plot(materials(m).lineH, materials(m).lineB, 'k');
        legend([p, p2], ["$ "+[materials(m).data.resistance]+" k\Omega $", "edge line"], 'Location', 'Best', 'interpreter','latex')
        figure(10+m)
        set(gca,'fontsize',12);
        hold on;
        title("Material "+materials(m).material+" permeability ", 'interpreter','latex');
        xlabel("$ \left[V\right] \propto H $", 'interpreter','latex');
        ylabel("$ \propto \mu $", 'interpreter','latex');
        plot(materials(m).lineH(2:end), materials(m).per, '.-')
    end
    
% Print the relative permeability 
%     for m1=1:4
%         for m2=m1+1:5
%             figure(100+10*m1+m2)
%             set(gca,'fontsize',12);
%             hold on;
%             title(sprintf("Relative permeability $ \\frac{\\mu_{%d}}{\\mu_{%d}} $", m1, m2), 'interpreter', 'latex');
%             xlabel("$ \left[V\right] \propto H $", 'interpreter', 'latex');
%             ylabel(sprintf("$ \\frac{\\mu_{%d}}{\\mu_{%d}} $", m1, m2), 'interpreter','latex');
%             plot([],materials(m1).per./materials(m2).per)
%         end
%     end
end


%%
function materials=getMaterials(m)
    materials.data = getMaterialData(m);
    materials.material = m;
    materials.lineH = [materials.data.ch1point];
    materials.lineB = [materials.data.ch2point];
    materials.per = diff(materials.lineB)./diff(materials.lineH);
end


%%
function data=getMaterialData(m)
    files=dir("material_" + m + "*.csv");
    for k=length(files):-1:1 %repeat for every file
        data(k) = getMeasurementData(files(k));
    end
end

%%
function measure=getMeasurementData(file)
        [times, ch1, ch2] = importfile(file.name); %import data to tuple vector
        resistanceString = string(file.name(14:end-4));
        resistance = str2double(file.name(14:end-5));
%         
%             Rmlist = isnan(times); %get rid of NaN in data!
%             T(Rmlist) = [];
%             Y(Rmlist) = [];
%             Y=Y+abs(min(Y));
%             localmax=findpeaks(Y,'MinPeakProminence',0.1);
%             ch1(Rmlist) = [];
%             ch2(Rmlist) = [];
        %ch1=smooth(smooth(ch1));
        %ch2=smooth(smooth(ch2));
        [~, maxIdx] = max(ch1);
        measure = struct('ch1',ch1, 'Times',times,'ch2',ch2,'fileName',file.name, 'resistanceString', resistanceString, 'resistance', resistance, 'ch1point', ch1(maxIdx), 'ch2point', ch2(maxIdx));
end


%% defult import data functions
function [times, ch1, ch2] = importfile(filename, dataLines)
%IMPORTFILE Import data from a text file
%  [TIMES, CH1, CH2] = IMPORTFILE(FILENAME) reads data from text file
%  FILENAME for the default selection.  Returns the data as column
%  vectors.
%
%  [TIMES, CH1, CH2] = IMPORTFILE(FILE, DATALINES) reads data for the
%  specified row interval(s) of text file FILENAME. Specify DATALINES as
%  a positive scalar integer or a N-by-2 array of positive scalar
%  integers for dis-contiguous row intervals.
%
%  Example:
%  [times, ch1, ch2] = importfile("C:\Users\zrobb\Documents\לימודים\פיזיקה\מעבדה ב\מגנטיות\שבוע 1\material_1_R_0k.csv", [1, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 18-Nov-2021 01:30:12

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [1, Inf];
end

%% Setup the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 11);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["Var1", "Var2", "Var3", "times", "ch1", "Var6", "Var7", "Var8", "Var9", "Var10", "ch2"];
opts.SelectedVariableNames = ["times", "ch1", "ch2"];
opts.VariableTypes = ["string", "string", "string", "double", "double", "string", "string", "string", "string", "string", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["Var1", "Var2", "Var3", "Var6", "Var7", "Var8", "Var9", "Var10"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["Var1", "Var2", "Var3", "Var6", "Var7", "Var8", "Var9", "Var10"], "EmptyFieldRule", "auto");

% Import the data
tbl = readtable(filename, opts);

%% Convert to output type
times = tbl.times;
ch1 = tbl.ch1;
ch2 = tbl.ch2;
end